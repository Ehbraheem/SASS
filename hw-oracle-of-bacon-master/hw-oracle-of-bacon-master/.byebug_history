exit
c
nodes
nodes.flatten
["goods"].flatten
["goods"].flatten!
["goods].flatten!
nodes.flatten!
nodes
exit
c
n
c
nodes
n
nodes
c
nod.text.strip.gsub("\n")
nod.text.strip.gsub("\n").split
nod.text.strip.gsub("\n").split(" ")
nod.text.split(" ")
nod.text.split( " ")
nod.text.split
nod.split
exit
c
nod.text.strip.gsub("\n", ",")
nod.text.strip.gsub("\n", ",").to_a
nod.text.strip.gsub("\n", ",")
nod.text.strip
nod.text
nod
c
nodes
nod
n
c
@data
c
@data
c
cls
c
@data
c
[].append("hello")
@data
@data.is_a?
@data
c
@data
@doc.xpath("/link").each {|a| puts a.text}
@doc.xpath("///.").each {|a| puts a.text}
@doc.xpath("/link").each {|a| puts a.text}
@doc.xpath("/link")
@doc
c
@doc.xpath('//match').each {|a| puts a.text}
system 'clear'
cls
@doc.xpath('//match').each {|a| puts a.text}
@doc.xpath('//match')
system 'clear'
@doc
to_a
@data
c
@doc
@doc.xpath("//actor")
system 'clear'
`clear`
clear
@doc.each {|c| puts c}
@doc.methods.grep /data/
@doc.methods
@doc.node
@doc
@DOC
c
oo.errors.messages.grep /from.*/
oo.errors.messages.grep /from.*//
oo.errors.messages.grep /from/
oo.errors.messages
oo.errors
oo.errors.grep /from/
oo.errors.grep /from_eq/
oo.errors
oo.from_does_not_equal_to
oo.valid?
oo= OracleOfBacon.new("api_key")
c
oo.from_does_not_equal_to
oo.valid?
oo= OracleOfBacon.new("api_key")
c
oo.from_does_not_equal_to
oo.valid?
oo= OracleOfBacon.new("api_key")
c
oo.valid?
oo.from_does_not_equal_to
oo= OracleOfBacon.new("api_key")
c
oo.from_does_not_equal_to
oo.valid?
oo= OracleOfBacon.new("api_key")
c
oo.valid?
oo= OracleOfBacon.new("api_key")
OracleOfBacon
@orb
n
@orb
c
n
var all
var 
@orb
n
cls
@orb
var local
var all
var
